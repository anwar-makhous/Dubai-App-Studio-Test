// Mocks generated by Mockito 5.4.4 from annotations
// in dubai_app_studio/test/features/beneficiary/domain/usecases/add_beneficiary_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:dubai_app_studio/core/error/error.dart' as _i5;
import 'package:dubai_app_studio/core/usecases/add_beneficiary_params.dart'
    as _i6;
import 'package:dubai_app_studio/core/usecases/delete_beneficiary_params.dart'
    as _i7;
import 'package:dubai_app_studio/core/usecases/send_otp_params.dart' as _i9;
import 'package:dubai_app_studio/core/usecases/verify_otp_params.dart' as _i10;
import 'package:dubai_app_studio/features/beneficiary/domain/entities/beneficiary.dart'
    as _i8;
import 'package:dubai_app_studio/features/beneficiary/domain/repositories/beneficiary_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BeneficiaryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBeneficiaryRepository extends _i1.Mock
    implements _i3.BeneficiaryRepository {
  MockBeneficiaryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> addBeneficiary(
          {required _i6.AddBeneficiaryParams? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #addBeneficiary,
          [],
          {#params: params},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #addBeneficiary,
            [],
            {#params: params},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> deleteBeneficiary(
          {required _i7.DeleteBeneficiaryParams? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteBeneficiary,
          [],
          {#params: params},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #deleteBeneficiary,
            [],
            {#params: params},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i8.Beneficiary>>>
      getBeneficiaries() => (super.noSuchMethod(
            Invocation.method(
              #getBeneficiaries,
              [],
            ),
            returnValue: _i4
                .Future<_i2.Either<_i5.Failure, List<_i8.Beneficiary>>>.value(
                _FakeEither_0<_i5.Failure, List<_i8.Beneficiary>>(
              this,
              Invocation.method(
                #getBeneficiaries,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i8.Beneficiary>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> sendOtp(
          {required _i9.SendOtpParams? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendOtp,
          [],
          {#params: params},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #sendOtp,
            [],
            {#params: params},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> verifyOtp(
          {required _i10.VerifyOtpParams? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyOtp,
          [],
          {#params: params},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #verifyOtp,
            [],
            {#params: params},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);
}
