// Mocks generated by Mockito 5.4.4 from annotations
// in dubai_app_studio/test/features/beneficiary/presentation/blocs/beneficiaries_bloc/beneficiaries_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:dubai_app_studio/core/error/error.dart' as _i6;
import 'package:dubai_app_studio/core/usecases/add_beneficiary_params.dart'
    as _i7;
import 'package:dubai_app_studio/core/usecases/delete_beneficiary_params.dart'
    as _i9;
import 'package:dubai_app_studio/core/usecases/send_otp_params.dart' as _i11;
import 'package:dubai_app_studio/core/usecases/usecase.dart' as _i16;
import 'package:dubai_app_studio/core/usecases/verify_otp_params.dart' as _i13;
import 'package:dubai_app_studio/features/beneficiary/domain/entities/beneficiary.dart'
    as _i15;
import 'package:dubai_app_studio/features/beneficiary/domain/repositories/beneficiary_repository.dart'
    as _i2;
import 'package:dubai_app_studio/features/beneficiary/domain/usecases/add_beneficiary.dart'
    as _i4;
import 'package:dubai_app_studio/features/beneficiary/domain/usecases/delete_beneficiary.dart'
    as _i8;
import 'package:dubai_app_studio/features/beneficiary/domain/usecases/get_beneficiaries.dart'
    as _i14;
import 'package:dubai_app_studio/features/beneficiary/domain/usecases/send_otp.dart'
    as _i10;
import 'package:dubai_app_studio/features/beneficiary/domain/usecases/verify_otp.dart'
    as _i12;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBeneficiaryRepository_0 extends _i1.SmartFake
    implements _i2.BeneficiaryRepository {
  _FakeBeneficiaryRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AddBeneficiary].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddBeneficiary extends _i1.Mock implements _i4.AddBeneficiary {
  MockAddBeneficiary() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BeneficiaryRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeBeneficiaryRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.BeneficiaryRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> call(
          _i7.AddBeneficiaryParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}

/// A class which mocks [DeleteBeneficiary].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteBeneficiary extends _i1.Mock implements _i8.DeleteBeneficiary {
  MockDeleteBeneficiary() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BeneficiaryRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeBeneficiaryRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.BeneficiaryRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> call(
          _i9.DeleteBeneficiaryParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}

/// A class which mocks [SendOtp].
///
/// See the documentation for Mockito's code generation for more information.
class MockSendOtp extends _i1.Mock implements _i10.SendOtp {
  MockSendOtp() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BeneficiaryRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeBeneficiaryRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.BeneficiaryRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> call(_i11.SendOtpParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}

/// A class which mocks [VerifyOtp].
///
/// See the documentation for Mockito's code generation for more information.
class MockVerifyOtp extends _i1.Mock implements _i12.VerifyOtp {
  MockVerifyOtp() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BeneficiaryRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeBeneficiaryRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.BeneficiaryRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> call(
          _i13.VerifyOtpParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}

/// A class which mocks [GetBeneficiaries].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetBeneficiaries extends _i1.Mock implements _i14.GetBeneficiaries {
  MockGetBeneficiaries() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BeneficiaryRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeBeneficiaryRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.BeneficiaryRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i15.Beneficiary>>> call(
          _i16.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i15.Beneficiary>>>.value(
                _FakeEither_1<_i6.Failure, List<_i15.Beneficiary>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i15.Beneficiary>>>);
}
